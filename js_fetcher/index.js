"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const argv_1 = __importDefault(require("argv"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const winston = __importStar(require("winston"));
// import Olm before importing js-sdk to prevent it crying
global.Olm = require('olm');
const matrix_js_sdk_1 = require("matrix-js-sdk");
// side-effect upgrade MatrixClient prototype
require("./matrix_client_ext");
const Queue = require('better-queue');
const SqliteStore = require('better-queue-sqlite');
const request = require('request-promise');
const LocalStorageCryptoStore = require('matrix-js-sdk/lib/crypto/store/localStorage-crypto-store').default;
argv_1.default.option([
    {
        name: 'config',
        type: 'path',
        description: 'Path to the JSON config file',
    }, {
        name: 'data',
        type: 'path',
        description: 'Path to the data directory',
    }, {
        name: 'matrix-search-url',
        type: 'string',
        description: 'The address:port of the matrix-search Go server',
    },
]);
const args = argv_1.default.run();
// Loading localStorage module
if (typeof global.localStorage === "undefined" || global.localStorage === null)
    global.localStorage = new (require('node-localstorage').LocalStorage)(path.join(args.options['data'], 'js_fetcher.localStorage'));
matrix_js_sdk_1.setCryptoStoreFactory(() => new LocalStorageCryptoStore(global.localStorage));
const logger = new winston.Logger({
    level: 'info',
    transports: [
        new winston.transports.Console({ colorize: true })
    ]
});
class BleveHttp {
    constructor(baseUrl) {
        this.request = request.defaults({ baseUrl });
    }
    enqueue(events) {
        return this.request({
            url: 'enqueue',
            method: 'POST',
            json: true,
            body: events,
        });
    }
}
function indexable(ev) {
    return indexableKeys.some((key) => lodash_get_1.default(ev, key) !== undefined);
}
setup().then();
// debug disable js-sdk log spam
const disableConsoleLogger = false;
if (disableConsoleLogger) {
    console.log = function () { };
    console.warn = function () { };
    console.error = function () { };
    console.error = function () { };
}
const FILTER_BLOCK = {
    not_types: ['*'],
    limit: 0,
};
function onTaskQueued(task_id, ev) {
    const { room_id, event_id, sender, type } = ev;
    if (ev.redacts) {
        logger.info('enqueue event for redaction', { room_id, event_id, task_id });
    }
    else {
        logger.info('enqueue event for indexing', { room_id, event_id, sender, type, task_id });
    }
}
function onBatchFailed(error) {
    logger.error('batch failed', { error });
}
async function setup() {
    let config;
    try {
        config = require(args.options['config'] || 'config.json');
    }
    catch (e) {
        logger.error('failed to load config', e);
        return;
    }
    const b = new BleveHttp(args.options['matrix-search-url'] || "http://localhost:8000/api/");
    const q = new Queue(async (batch, cb) => {
        try {
            cb(null, await b.enqueue(batch));
        }
        catch (e) {
            cb(e);
        }
    }, {
        batchSize: 100,
        maxRetries: 100,
        retryDelay: 5000,
        store: new SqliteStore({
            path: path.join(args.options['data'], 'js_fetcher.queue.sqlite'),
        }),
    });
    q.on('task_queued', onTaskQueued);
    q.on('batch_failed', onBatchFailed);
    const cli = matrix_js_sdk_1.createClient({
        baseUrl: config['hs_url'],
        idBaseUrl: '',
        userId: config['user_id'],
        deviceId: config['device_id'],
        accessToken: config['access_token'],
        useAuthorizationHeader: true,
        store: new matrix_js_sdk_1.MatrixInMemoryStore({
            localStorage: global.localStorage,
        }),
        sessionStore: new matrix_js_sdk_1.WebStorageSessionStore(global.localStorage),
    });
    cli.on('event', (event) => {
        if (event.isEncrypted())
            return;
        const cev = event.getClearEvent();
        // if event can be redacted or is a redaction then enqueue it for processing
        if (event.getType() === "m.room.redaction" || !indexable(cev))
            return;
        return q.push(cev);
    });
    cli.on('Event.decrypted', (event) => {
        if (event.isDecryptionFailure()) {
            logger.warn('decryption failure', { event: event.event });
            return;
        }
        const cev = event.getClearEvent();
        if (!indexable(cev))
            return;
        return q.push(cev);
    });
    // cli.on('Room.redaction', (event: MatrixEvent) => {
    //     return q.push({
    //         type: JobType.redact,
    //         event: event.getClearEvent(),
    //     });
    // });
    try {
        logger.info('initializing crypto');
        await cli.initCrypto();
    }
    catch (error) {
        logger.error('failed to init crypto', { error });
        process.exit(-1);
    }
    logger.info('crypto initialized');
    // create sync filter
    const filter = new matrix_js_sdk_1.Filter(cli.credentials.userId);
    filter.setDefinition({
        room: {
            include_leave: false,
            // ephemeral: FILTER_BLOCK, // we don't care about ephemeral events
            account_data: FILTER_BLOCK,
            // state: FILTER_BLOCK, // TODO: do we care about state
            timeline: {
                limit: 20,
            },
        },
        presence: FILTER_BLOCK,
        account_data: FILTER_BLOCK,
    });
    try {
        logger.info('loading/creating sync filter');
        filter.filterId = await cli.getOrCreateFilter(filterName(cli), filter);
    }
    catch (error) {
        logger.error('failed to getOrCreate sync filter', { error });
        process.exit(-1);
    }
    logger.info('sync filter loaded', { filter_id: filter.getFilterId() });
    logger.info('starting client');
    // filter sync to improve performance
    cli.startClient({
        disablePresence: true,
        filter,
    });
    logger.info('client started - fetcher has begun');
}
// TODO groups-pagination
// TODO backfill
// TODO gapfill
function filterName(cli) {
    return `MATRIX_SEARCH_FILTER_${cli.credentials.userId}`;
}
var RequestKey;
(function (RequestKey) {
    RequestKey["body"] = "content.body";
    RequestKey["name"] = "content.name";
    RequestKey["topic"] = "content.topic";
})(RequestKey || (RequestKey = {}));
const indexableKeys = [RequestKey.body, RequestKey.name, RequestKey.topic];
//# sourceMappingURL=data:application/json;base64,