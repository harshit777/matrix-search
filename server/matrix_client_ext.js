"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const matrix_js_sdk_1 = require("matrix-js-sdk");
const utils = require('matrix-js-sdk/src/utils');
// "dumb" mapper because e2e should be decrypted in browser, so we don't lose verification status
function getMapper(cli) {
    return function (plainOldJsObject) {
        return new matrix_js_sdk_1.MatrixEvent(plainOldJsObject);
    };
}
matrix_js_sdk_1.MatrixClient.prototype.fetchEvent = async function (roomId, eventId) {
    const path = utils.encodeUri('/rooms/$roomId/event/$eventId', {
        $roomId: roomId,
        $eventId: eventId,
    });
    let res;
    try {
        res = await this._http.authedRequest(undefined, 'GET', path);
    }
    catch (e) { }
    if (!res)
        throw new Error("'event' not in '/event' result - homeserver too old?");
    return getMapper(this)(res);
};
// XXX: use getEventTimeline once we store rooms properly
matrix_js_sdk_1.MatrixClient.prototype.fetchEventContext = async function (roomId, eventId, limit) {
    const path = utils.encodeUri('/rooms/$roomId/context/$eventId', {
        $roomId: roomId,
        $eventId: eventId,
    });
    let res;
    try {
        res = await this._http.authedRequest(undefined, 'GET', path, { limit });
    }
    catch (e) { }
    if (!res || !res.event)
        throw new Error("'event' not in '/context' result - homeserver too old?");
    // const mapper = this.getEventMapper();
    const mapper = getMapper(this);
    const event = mapper(res.event);
    const state = res.state.map(mapper);
    const events_after = res.events_after.map(mapper);
    const events_before = res.events_before.map(mapper);
    return {
        event,
        context: {
            start: res.start,
            end: res.end,
            state,
            events_after,
            events_before,
        },
    };
};
matrix_js_sdk_1.MatrixEvent.prototype.getClearEvent = function () {
    if (!this.isEncrypted())
        return this.event;
    return Object.assign({}, this.event, this._clearEvent);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4X2NsaWVudF9leHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXRyaXhfY2xpZW50X2V4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFpRjtBQUVqRixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUVqRCxpR0FBaUc7QUFDakcsbUJBQW1CLEdBQWlCO0lBQ2hDLE9BQU8sVUFBUyxnQkFBdUI7UUFDbkMsT0FBTyxJQUFJLDJCQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUE7QUFDTCxDQUFDO0FBRUQsNEJBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLEtBQUssV0FBVSxNQUFjLEVBQUUsT0FBZTtJQUM5RSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLCtCQUErQixFQUFFO1FBQzFELE9BQU8sRUFBRSxNQUFNO1FBQ2YsUUFBUSxFQUFFLE9BQU87S0FDcEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJO1FBQ0EsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoRTtJQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUU7SUFFZCxJQUFJLENBQUMsR0FBRztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztJQUVsRixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFFRix5REFBeUQ7QUFDekQsNEJBQVksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxXQUFVLE1BQWMsRUFBRSxPQUFlLEVBQUUsS0FBYTtJQUNwRyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxFQUFFO1FBQzVELE9BQU8sRUFBRSxNQUFNO1FBQ2YsUUFBUSxFQUFFLE9BQU87S0FDcEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJO1FBQ0EsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0tBQ3pFO0lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRTtJQUVkLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7SUFFOUUsd0NBQXdDO0lBRXhDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUvQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWhDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBELE9BQU87UUFDSCxLQUFLO1FBQ0wsT0FBTyxFQUFFO1lBQ0wsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1lBQ2hCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztZQUNaLEtBQUs7WUFDTCxZQUFZO1lBQ1osYUFBYTtTQUNoQjtLQUNKLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRiwyQkFBVyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUc7SUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDM0MsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50LCBFdmVudFdpdGhDb250ZXh0LCBNYXRyaXhDbGllbnQsIE1hdHJpeEV2ZW50fSBmcm9tICdtYXRyaXgtanMtc2RrJztcclxuXHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnbWF0cml4LWpzLXNkay9zcmMvdXRpbHMnKTtcclxuXHJcbi8vIFwiZHVtYlwiIG1hcHBlciBiZWNhdXNlIGUyZSBzaG91bGQgYmUgZGVjcnlwdGVkIGluIGJyb3dzZXIsIHNvIHdlIGRvbid0IGxvc2UgdmVyaWZpY2F0aW9uIHN0YXR1c1xyXG5mdW5jdGlvbiBnZXRNYXBwZXIoY2xpOiBNYXRyaXhDbGllbnQpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihwbGFpbk9sZEpzT2JqZWN0OiBFdmVudCk6IE1hdHJpeEV2ZW50IHtcclxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeEV2ZW50KHBsYWluT2xkSnNPYmplY3QpO1xyXG4gICAgfVxyXG59XHJcblxyXG5NYXRyaXhDbGllbnQucHJvdG90eXBlLmZldGNoRXZlbnQgPSBhc3luYyBmdW5jdGlvbihyb29tSWQ6IHN0cmluZywgZXZlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxNYXRyaXhFdmVudD4ge1xyXG4gICAgY29uc3QgcGF0aCA9IHV0aWxzLmVuY29kZVVyaSgnL3Jvb21zLyRyb29tSWQvZXZlbnQvJGV2ZW50SWQnLCB7XHJcbiAgICAgICAgJHJvb21JZDogcm9vbUlkLFxyXG4gICAgICAgICRldmVudElkOiBldmVudElkLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXdhaXQgdGhpcy5faHR0cC5hdXRoZWRSZXF1ZXN0KHVuZGVmaW5lZCwgJ0dFVCcsIHBhdGgpO1xyXG4gICAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgICBpZiAoIXJlcykgdGhyb3cgbmV3IEVycm9yKFwiJ2V2ZW50JyBub3QgaW4gJy9ldmVudCcgcmVzdWx0IC0gaG9tZXNlcnZlciB0b28gb2xkP1wiKTtcclxuXHJcbiAgICByZXR1cm4gZ2V0TWFwcGVyKHRoaXMpKHJlcyk7XHJcbn07XHJcblxyXG4vLyBYWFg6IHVzZSBnZXRFdmVudFRpbWVsaW5lIG9uY2Ugd2Ugc3RvcmUgcm9vbXMgcHJvcGVybHlcclxuTWF0cml4Q2xpZW50LnByb3RvdHlwZS5mZXRjaEV2ZW50Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uKHJvb21JZDogc3RyaW5nLCBldmVudElkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIpOiBQcm9taXNlPEV2ZW50V2l0aENvbnRleHQ+IHtcclxuICAgIGNvbnN0IHBhdGggPSB1dGlscy5lbmNvZGVVcmkoJy9yb29tcy8kcm9vbUlkL2NvbnRleHQvJGV2ZW50SWQnLCB7XHJcbiAgICAgICAgJHJvb21JZDogcm9vbUlkLFxyXG4gICAgICAgICRldmVudElkOiBldmVudElkLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXdhaXQgdGhpcy5faHR0cC5hdXRoZWRSZXF1ZXN0KHVuZGVmaW5lZCwgJ0dFVCcsIHBhdGgsIHtsaW1pdH0pO1xyXG4gICAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgICBpZiAoIXJlcyB8fCAhcmVzLmV2ZW50KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIidldmVudCcgbm90IGluICcvY29udGV4dCcgcmVzdWx0IC0gaG9tZXNlcnZlciB0b28gb2xkP1wiKTtcclxuXHJcbiAgICAvLyBjb25zdCBtYXBwZXIgPSB0aGlzLmdldEV2ZW50TWFwcGVyKCk7XHJcblxyXG4gICAgY29uc3QgbWFwcGVyID0gZ2V0TWFwcGVyKHRoaXMpO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50ID0gbWFwcGVyKHJlcy5ldmVudCk7XHJcblxyXG4gICAgY29uc3Qgc3RhdGUgPSByZXMuc3RhdGUubWFwKG1hcHBlcik7XHJcbiAgICBjb25zdCBldmVudHNfYWZ0ZXIgPSByZXMuZXZlbnRzX2FmdGVyLm1hcChtYXBwZXIpO1xyXG4gICAgY29uc3QgZXZlbnRzX2JlZm9yZSA9IHJlcy5ldmVudHNfYmVmb3JlLm1hcChtYXBwZXIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgY29udGV4dDoge1xyXG4gICAgICAgICAgICBzdGFydDogcmVzLnN0YXJ0LFxyXG4gICAgICAgICAgICBlbmQ6IHJlcy5lbmQsXHJcbiAgICAgICAgICAgIHN0YXRlLFxyXG4gICAgICAgICAgICBldmVudHNfYWZ0ZXIsXHJcbiAgICAgICAgICAgIGV2ZW50c19iZWZvcmUsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn07XHJcblxyXG5NYXRyaXhFdmVudC5wcm90b3R5cGUuZ2V0Q2xlYXJFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzRW5jcnlwdGVkKCkpIHJldHVybiB0aGlzLmV2ZW50O1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZXZlbnQsIHRoaXMuX2NsZWFyRXZlbnQpO1xyXG59OyJdfQ==